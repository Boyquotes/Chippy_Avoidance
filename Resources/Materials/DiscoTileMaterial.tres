[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=3]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.2.stable's SpatialMaterial.

shader_type spatial;
render_mode unshaded;

// CUSTOM DATA FORMAT: grid_pos.x, grid_pos.y, grid_size, intensity
uniform float max_jump_dist = 6.0;
uniform vec4 hill_color : hint_color;
uniform sampler2D noise_map : hint_black;

// Rate of pattern within the fog.
uniform float starting_frequency = 0.5;

// Shift towards transparency (clamped) for sparser fog.
uniform float shift: hint_range(-1.0, 0.0) = 0.0;

// Direction and speed of travel.
uniform vec2 move_velocity = vec2(0.2, 0.2);


float rand(vec2 uv) {
	float frequency = starting_frequency;
	float output = 0.0;
	output += texture(noise_map, uv * frequency).x;
	return clamp(output + shift, 0.0, 1.0);
}

void vertex() {
//	float _intensity = texture(noise_map, vec2(INSTANCE_CUSTOM.x, INSTANCE_CUSTOM.y) / vec2(INSTANCE_CUSTOM.z)).r;
	vec2 _tile_position = vec2(INSTANCE_CUSTOM.x, INSTANCE_CUSTOM.y) / vec2(INSTANCE_CUSTOM.z);
	float _intensity = rand(_tile_position + TIME * starting_frequency * move_velocity) * INSTANCE_CUSTOM.a;
	VERTEX.y += _intensity * max_jump_dist;
	COLOR.rgb = mix(COLOR.rgb, hill_color.rgb, _intensity);
}


void fragment() {
	ALBEDO.rgb = COLOR.rgb;
	ALPHA = COLOR.a;
}
"

[sub_resource type="OpenSimplexNoise" id=4]
seed = 10
octaves = 1
period = 76.2

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[resource]
shader = SubResource( 3 )
shader_param/max_jump_dist = 30.0
shader_param/hill_color = Color( 1, 0.258824, 0.415686, 1 )
shader_param/starting_frequency = 0.5
shader_param/shift = -0.2
shader_param/move_velocity = Vector2( 0.2, 0.2 )
shader_param/noise_map = SubResource( 5 )
